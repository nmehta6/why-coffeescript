Thanks, Roman!

Hi my name is Nachiket Mehta. I have been involved in the development of the Clarity framework as well as the server-side Web API for the OptiNet application.

--------------------------------------------------------------------
EVOLUTION
--------------------------------------------------------------------

I will show you guys an evolution of technologies that lead to the development of ASP.NET Web API. I will also provide some code samples as well as other technical information about this new framework.

* Evolution from MVC to web api design pattern
MVC (Model-View-Controller) is a well established software design pattern that is widely known and used within the software development community. The MVC design pattern is an easy way to separate concerns of programming different parts of a system. In the context of ASP.NET MVC or any other server-side MVC toolkit, the MVC design pattern creates a separation between the following components.
- View (HTML, Javascript, CSS)
- Controller (Handle requests)
- Model (Information needed to generate a view)
HTML is rendered on the server-side using a model and sent to the browser.

As Cary showed earlier, there have been some significant improvements in the browser javascript engines. Javascript can now execute much faster in the browser. This has spurred development of many client-side Javascript MVC libraries such as AngularJS, EmberJS, Backbone, etc.

Additionally, mobile devices are now providing user interfaces to users in many forms and interactions. This means that many UI applications need to interact with a server API.

Here I will show you how such an API can be implemented using ASP.NET Web API.

--------------------------------------------------------------------
EXAMPLE
--------------------------------------------------------------------

Here is an example of how an API could look.
This API provides a list of clients at the shown URL.
As you can see, the controller code is not returning any HTML.
It simply returns a list of objects which are then serialized to JSON.

--------------------------------------------------------------------
Highlights of Web API
--------------------------------------------------------------------
Service-orientation: A service pagadigm is a way of designing software. Service-orientation provides a lot more flexibility for
distributed systems. Separation of concerns is what is at the heart of service oriented systems. In the context of Web API, we can
create services that can be accessed by many browsers and devices. Service-orientation allows us to provide data and business logic to
the consuming devices and separate the concerns of a user interface from business logic. Web API services work on top of the HTTP protocol
and use JSON as the data structure. This makes interoperability very easy.

Leverage HTTP: HTTP is a proven foundation for distributed systems on the World Wide Web. HTTP provides logical links or hyperlinks
that allow access to resources. As Jack discussed earlier, a REST approach allows us to define business resources and expose them
on specific hyperlinks. HTTP verbs are used to dictate the type of communication that happens on a particular hyperlink. HTTP session
is a useful way to maintain a state for an authenticated device for a series of request-response transactions. Some examples of HTTP
communication are:

Clarity App Demo: Here we can see how OptiNet, a clarity application, is communicating with a Web API using GET and POST verbs.
examples: http://optinet-dev-ui/api/clients and POST to create a new registration. 500 status code example.

Loose coupling of Business Logic and Presentation: Clarity applications separate concerns of presentation away from the server and make the
browser responsible for user interactions. Now, the server only needs to provide data and business logic to the browser.

Easily unit testable: As we saw in the example earlier, Web API controllers return objects and not HTML. This makes testing of API's much
more straight forward! Clarity applications are responsible for testing presentation logic.


--------------------------------------------------------------------
Clarity API Builder Demo
--------------------------------------------------------------------
Here we are going to take a mockup of a screen that is a simplified version of what exists in OptiNet today. I will try to show you guys what's called 'builder' in Clarity API as well as the interactive documentation of Clarity API. So, let's build something!

-------------------------
Builder Demo
-------------------------
Clarity API has interactive documentation available at http://clarity-api. Builder is a part of this documentation that assists developers
in rapidly building screens. We will use the builder here to demostrate how easy and straightforward it can be to start using Clarity API.

Let's fire up the builder!

step 1 - Here, I have laid out some scaffolding type of code for the sake of time and sanity. This fragment of code creates an HTML
form that can encapsulate Clarity API widgets.

step 2 - Here we have added the legend and ng-controller. ng-controller is part of AngularJS that allows us to establish two-way binding
with Clarity API widgets. I have mocked up some data on the 'playgroundController' that will allow us to bind to.

step 3 (fieldset 1)
	- inputs with caption, dispaly="inline"
	- dropdown with captiion and datasource 'specialties'
	- regular <span> element working well with widgets
	- popover with caption and transclusion
	-  radiobuttons with datasource and no caption

step 4 (fieldset 2)
	- checkboxes with datasource
	- buttons with kind="primary" for one and caption

step 5 - app-text-curve and class="bottom-bumper"

There are lots of widgets that you can checkout beyond this demo. They offer interactive documentation as well.

-------------------------
Post Building: Here I have shown some of the widgets that exist in Clarity API. There are lots of more widgets but this gives you guys the idea of how easy it can be to build a UI with Clarity API widgets.